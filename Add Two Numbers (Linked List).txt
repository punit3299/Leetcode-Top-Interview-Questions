/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        
        ListNode *head1=l1,*head2=l2,*head=NULL;
        int first=0,second=0,carry=0;
        
        while(head1 || head2){
            first=getValue(head1);
            second=getValue(head2);
            first=first+second+carry;
            if(first>=10){
                first=first%10;
                carry=1;
            }else{
                carry=0;
            }
            head=addNode(first,head);
            head1=iterateNext(head1);
            head2=iterateNext(head2);
        }
        if(carry==1){
            head=addNode(1,head);
        }
        return head;
    }
    
    int getValue(ListNode *node){
        if(node){
            return node->val;
        }
        return 0;
    }
    
    ListNode* iterateNext(ListNode* node){
        if(node){
            return node->next;
        }
        return NULL;
    }
    
    ListNode* addNode(int value, ListNode* head){
        ListNode* node = new ListNode(value);
        ListNode* temp = head;
        if(head==NULL){
            node->next=head;
            head=node;
        }else{
            while(temp->next){
                temp=temp->next;
            }
            temp->next=node;
        }
        
        return head;
    }
};